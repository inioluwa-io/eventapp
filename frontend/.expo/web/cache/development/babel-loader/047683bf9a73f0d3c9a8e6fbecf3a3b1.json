{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Code\\\\chowberry-merchant-main (1)\\\\chowberry-merchant-main\\\\node_modules\\\\react-native-animated-splash-screen\\\\lib\\\\AnimatedSplash.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport styles, { _solidBackground, _dynamicLogoStyle, _dynamicCustomComponentStyle, _dynamicImageBackground } from \"./AnimatedSplash.style\";\n\nvar AnimatedSplash = function (_React$Component) {\n  _inherits(AnimatedSplash, _React$Component);\n\n  var _super = _createSuper(AnimatedSplash);\n\n  function AnimatedSplash() {\n    var _this;\n\n    _classCallCheck(this, AnimatedSplash);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      animationDone: false,\n      loadingProgress: new Animated.Value(0)\n    };\n    return _this;\n  }\n\n  _createClass(AnimatedSplash, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      var isLoaded = this.props.isLoaded;\n      var loadingProgress = this.state.loadingProgress;\n\n      if (isLoaded && !prevProps.isLoaded) {\n        Animated.timing(loadingProgress, {\n          toValue: 100,\n          duration: 1000,\n          useNativeDriver: true\n        }).start(function () {\n          _this2.setState({\n            animationDone: true\n          });\n        });\n      }\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          preload = _this$props.preload,\n          isLoaded = _this$props.isLoaded;\n\n      if (preload || preload == null) {\n        return children;\n      } else {\n        if (isLoaded) {\n          return children;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loadingProgress = _this$state.loadingProgress,\n          animationDone = _this$state.animationDone;\n      var _this$props2 = this.props,\n          logoImage = _this$props2.logoImage,\n          logoWidth = _this$props2.logoWidth,\n          logoHeight = _this$props2.logoHeight,\n          backgroundColor = _this$props2.backgroundColor,\n          imageBackgroundSource = _this$props2.imageBackgroundSource,\n          imageBackgroundResizeMode = _this$props2.imageBackgroundResizeMode,\n          translucent = _this$props2.translucent,\n          customComponent = _this$props2.customComponent;\n      var opacityClearToVisible = {\n        opacity: loadingProgress.interpolate({\n          inputRange: [0, 15, 30],\n          outputRange: [0, 0, 1],\n          extrapolate: \"clamp\"\n        })\n      };\n      var imageScale = {\n        transform: [{\n          scale: loadingProgress.interpolate({\n            inputRange: [0, 10, 100],\n            outputRange: [1, 1, 65]\n          })\n        }]\n      };\n      var logoScale = {\n        transform: [{\n          scale: loadingProgress.interpolate({\n            inputRange: [0, 10, 100],\n            outputRange: [1, 0.8, 10]\n          })\n        }]\n      };\n      var logoOpacity = {\n        opacity: loadingProgress.interpolate({\n          inputRange: [0, 20, 100],\n          outputRange: [1, 0, 0],\n          extrapolate: \"clamp\"\n        })\n      };\n      var appScale = {\n        transform: [{\n          scale: loadingProgress.interpolate({\n            inputRange: [0, 7, 100],\n            outputRange: [1.1, 1.05, 1]\n          })\n        }]\n      };\n      return React.createElement(View, {\n        style: [styles.container],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }\n      }, React.createElement(StatusBar, {\n        backgroundColor: backgroundColor || null,\n        animated: true,\n        translucent: translucent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }), !animationDone && React.createElement(View, {\n        style: StyleSheet.absoluteFill,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 28\n        }\n      }), React.createElement(View, {\n        style: styles.containerGlue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, !animationDone && React.createElement(Animated.View, {\n        style: _solidBackground(logoOpacity, backgroundColor),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }\n      }), React.createElement(Animated.View, {\n        style: [appScale, opacityClearToVisible, styles.flex],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }, this.renderChildren()), !animationDone && React.createElement(Animated.Image, {\n        resizeMode: imageBackgroundResizeMode || \"cover\",\n        source: imageBackgroundSource || require(\"./background.png\"),\n        style: _dynamicImageBackground(imageScale, logoOpacity, backgroundColor),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }), !animationDone && React.createElement(View, {\n        style: [StyleSheet.absoluteFill, styles.logoStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, customComponent ? React.createElement(Animated.View, {\n        style: _dynamicCustomComponentStyle(logoScale, logoOpacity, logoWidth, logoHeight),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, customComponent) : React.createElement(Animated.Image, {\n        source: logoImage,\n        resizeMode: \"contain\",\n        style: _dynamicLogoStyle(logoScale, logoOpacity, logoWidth, logoHeight),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      }))));\n    }\n  }]);\n\n  return AnimatedSplash;\n}(React.Component);\n\nAnimatedSplash.defaultProps = {\n  isLoaded: false\n};\nAnimatedSplash.propTypes = {\n  preload: PropTypes.bool,\n  logoWidth: PropTypes.number,\n  children: PropTypes.element,\n  logoHeight: PropTypes.number,\n  backgroundColor: PropTypes.string,\n  isLoaded: PropTypes.bool.isRequired,\n  disableBackgroundImage: PropTypes.bool,\n  logoImage: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),\n  translucent: PropTypes.bool,\n  customComponent: PropTypes.element\n};\nexport default AnimatedSplash;","map":{"version":3,"sources":["C:/Code/chowberry-merchant-main (1)/chowberry-merchant-main/node_modules/react-native-animated-splash-screen/lib/AnimatedSplash.js"],"names":["PropTypes","React","styles","_solidBackground","_dynamicLogoStyle","_dynamicCustomComponentStyle","_dynamicImageBackground","AnimatedSplash","state","animationDone","loadingProgress","Animated","Value","prevProps","isLoaded","props","timing","toValue","duration","useNativeDriver","start","setState","children","preload","logoImage","logoWidth","logoHeight","backgroundColor","imageBackgroundSource","imageBackgroundResizeMode","translucent","customComponent","opacityClearToVisible","opacity","interpolate","inputRange","outputRange","extrapolate","imageScale","transform","scale","logoScale","logoOpacity","appScale","container","StyleSheet","absoluteFill","containerGlue","flex","renderChildren","require","logoStyle","Component","defaultProps","propTypes","bool","number","element","string","isRequired","disableBackgroundImage","oneOfType","object"],"mappings":"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","sourcesContent":["/* @flow */\r\nimport PropTypes from \"prop-types\"\r\nimport * as React from \"react\"\r\nimport { View, Animated, StatusBar, StyleSheet } from \"react-native\"\r\nimport styles, {\r\n  _solidBackground,\r\n  _dynamicLogoStyle,\r\n  _dynamicCustomComponentStyle,\r\n  _dynamicImageBackground,\r\n} from \"./AnimatedSplash.style\"\r\n\r\nclass AnimatedSplash extends React.Component {\r\n  static defaultProps = {\r\n    isLoaded: false,\r\n  }\r\n\r\n  state = {\r\n    animationDone: false,\r\n    loadingProgress: new Animated.Value(0),\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { isLoaded } = this.props\r\n    const { loadingProgress } = this.state\r\n\r\n    if (isLoaded && !prevProps.isLoaded) {\r\n      Animated.timing(loadingProgress, {\r\n        toValue: 100,\r\n        duration: 1000,\r\n        useNativeDriver: true,\r\n      }).start(() => {\r\n        this.setState({\r\n          animationDone: true,\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  renderChildren() {\r\n    const { children, preload, isLoaded } = this.props\r\n\r\n    if (preload || preload == null) {\r\n      return children\r\n    } else {\r\n      if (isLoaded) {\r\n        return children\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  render() {\r\n    const { loadingProgress, animationDone } = this.state\r\n    const {\r\n      logoImage,\r\n      logoWidth,\r\n      logoHeight,\r\n      backgroundColor,\r\n      imageBackgroundSource,\r\n      imageBackgroundResizeMode,\r\n      translucent,\r\n      customComponent,\r\n    } = this.props\r\n\r\n    const opacityClearToVisible = {\r\n      opacity: loadingProgress.interpolate({\r\n        inputRange: [0, 15, 30],\r\n        outputRange: [0, 0, 1],\r\n        extrapolate: \"clamp\",\r\n      }),\r\n    }\r\n\r\n    const imageScale = {\r\n      transform: [\r\n        {\r\n          scale: loadingProgress.interpolate({\r\n            inputRange: [0, 10, 100],\r\n            outputRange: [1, 1, 65],\r\n          }),\r\n        },\r\n      ],\r\n    }\r\n\r\n    const logoScale = {\r\n      transform: [\r\n        {\r\n          scale: loadingProgress.interpolate({\r\n            inputRange: [0, 10, 100],\r\n            outputRange: [1, 0.8, 10],\r\n          }),\r\n        },\r\n      ],\r\n    }\r\n\r\n    const logoOpacity = {\r\n      opacity: loadingProgress.interpolate({\r\n        inputRange: [0, 20, 100],\r\n        outputRange: [1, 0, 0],\r\n        extrapolate: \"clamp\",\r\n      }),\r\n    }\r\n\r\n    const appScale = {\r\n      transform: [\r\n        {\r\n          scale: loadingProgress.interpolate({\r\n            inputRange: [0, 7, 100],\r\n            outputRange: [1.1, 1.05, 1],\r\n          }),\r\n        },\r\n      ],\r\n    }\r\n\r\n    return (\r\n      <View style={[styles.container]}>\r\n        <StatusBar\r\n          backgroundColor={backgroundColor || null}\r\n          animated\r\n          translucent={translucent}\r\n        />\r\n        {!animationDone && <View style={StyleSheet.absoluteFill} />}\r\n        <View style={styles.containerGlue}>\r\n          {!animationDone && (\r\n            <Animated.View\r\n              style={_solidBackground(logoOpacity, backgroundColor)}\r\n            />\r\n          )}\r\n          <Animated.View style={[appScale, opacityClearToVisible, styles.flex]}>\r\n            {this.renderChildren()}\r\n          </Animated.View>\r\n          {!animationDone && (\r\n            <Animated.Image\r\n              resizeMode={imageBackgroundResizeMode || \"cover\"}\r\n              source={imageBackgroundSource || require(\"./background.png\")}\r\n              style={_dynamicImageBackground(\r\n                imageScale,\r\n                logoOpacity,\r\n                backgroundColor\r\n              )}\r\n            />\r\n          )}\r\n          {!animationDone && (\r\n            <View style={[StyleSheet.absoluteFill, styles.logoStyle]}>\r\n              {customComponent ? (\r\n                <Animated.View\r\n                  style={_dynamicCustomComponentStyle(\r\n                    logoScale,\r\n                    logoOpacity,\r\n                    logoWidth,\r\n                    logoHeight\r\n                  )}\r\n                >\r\n                  {customComponent}\r\n                </Animated.View>\r\n              ) : (\r\n                <Animated.Image\r\n                  source={logoImage}\r\n                  resizeMode={\"contain\"}\r\n                  style={_dynamicLogoStyle(\r\n                    logoScale,\r\n                    logoOpacity,\r\n                    logoWidth,\r\n                    logoHeight\r\n                  )}\r\n                />\r\n              )}\r\n            </View>\r\n          )}\r\n        </View>\r\n      </View>\r\n    )\r\n  }\r\n}\r\n\r\nAnimatedSplash.propTypes = {\r\n  preload: PropTypes.bool,\r\n  logoWidth: PropTypes.number,\r\n  children: PropTypes.element,\r\n  logoHeight: PropTypes.number,\r\n  backgroundColor: PropTypes.string,\r\n  isLoaded: PropTypes.bool.isRequired,\r\n  disableBackgroundImage: PropTypes.bool,\r\n  logoImage: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.object,\r\n  ]),\r\n  translucent: PropTypes.bool,\r\n  customComponent: PropTypes.element,\r\n}\r\n\r\nexport default AnimatedSplash\r\n"]},"metadata":{},"sourceType":"module"}