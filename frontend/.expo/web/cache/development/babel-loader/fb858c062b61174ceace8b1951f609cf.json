{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onInputChange\", \"defaultValue\", \"darkTheme\", \"loading\", \"setRef\", \"placeholder\", \"containerProps\"];\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Code\\\\chowberry-merchant-main (1)\\\\chowberry-merchant-main\\\\components\\\\AppSearchBar.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { SearchBar } from \"react-native-elements\";\n\nvar AppSearchBar = function AppSearchBar(_ref) {\n  var onInputChange = _ref.onInputChange,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? \"\" : _ref$defaultValue,\n      _ref$darkTheme = _ref.darkTheme,\n      darkTheme = _ref$darkTheme === void 0 ? false : _ref$darkTheme,\n      loading = _ref.loading,\n      setRef = _ref.setRef,\n      _ref$placeholder = _ref.placeholder,\n      placeholder = _ref$placeholder === void 0 ? \"Search for an item or brand...\" : _ref$placeholder,\n      containerProps = _ref.containerProps,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(defaultValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var handleInputChange = function handleInputChange(text) {\n    setValue(text);\n\n    if (typeof onInputChange === \"function\") {\n      onInputChange(text);\n    }\n  };\n\n  useEffect(function () {\n    setValue(defaultValue);\n  }, [defaultValue]);\n\n  var handleOnFocus = function handleOnFocus() {\n    if (typeof props.handleOnFocus === \"function\") {\n      props.handleOnFocus(true);\n    }\n  };\n\n  var handleOnBlur = function handleOnBlur() {\n    if (typeof props.handleOnBlur === \"function\") {\n      props.handleOnBlur(false);\n    }\n  };\n\n  return React.createElement(View, {\n    style: [styles.container, containerProps],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(SearchBar, _extends({\n    placeholder: placeholder,\n    lightTheme: false,\n    containerStyle: styles.containerTextInput,\n    inputContainerStyle: !darkTheme ? styles.textInput : styles.darkInput,\n    showCancel: true,\n    showLoading: loading,\n    value: value,\n    platform: Platform.OS === \"ios\" ? \"ios\" : \"android\",\n    onChangeText: handleInputChange,\n    onFocus: handleOnFocus,\n    onBlur: handleOnBlur,\n    onCancel: handleOnBlur,\n    cancelButtonProps: {\n      color: \"#222\"\n    }\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    position: \"relative\",\n    backgroundColor: \"transparent\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    margin: -5\n  },\n  textInput: {\n    borderRadius: 8,\n    backgroundColor: \"transparent\",\n    borderWidth: 0,\n    fontSize: 8\n  },\n  darkInput: {\n    borderRadius: 8,\n    backgroundColor: \"#eaeaea\",\n    borderWidth: 0,\n    fontSize: 8\n  },\n  containerTextInput: {\n    padding: 0,\n    flex: 1,\n    backgroundColor: \"transparent\",\n    fontSize: 8\n  }\n});\nexport { AppSearchBar };","map":{"version":3,"sources":["C:/Code/chowberry-merchant-main (1)/chowberry-merchant-main/components/AppSearchBar.js"],"names":["React","useState","useEffect","SearchBar","AppSearchBar","onInputChange","defaultValue","darkTheme","loading","setRef","placeholder","containerProps","props","value","setValue","handleInputChange","text","handleOnFocus","handleOnBlur","styles","container","containerTextInput","textInput","darkInput","Platform","OS","color","StyleSheet","create","flex","position","backgroundColor","flexDirection","justifyContent","alignItems","margin","borderRadius","borderWidth","fontSize","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, StyleSheet, Platform } from \"react-native\";\r\nimport { SearchBar } from \"react-native-elements\";\r\n\r\nconst AppSearchBar = ({\r\n  onInputChange,\r\n  defaultValue = \"\",\r\n  darkTheme = false,\r\n  loading,\r\n  setRef,\r\n  placeholder = \"Search for an item or brand...\",\r\n  containerProps,\r\n  ...props\r\n}) => {\r\n  const [value, setValue] = useState(defaultValue);\r\n\r\n  const handleInputChange = (text) => {\r\n    setValue(text);\r\n    if (typeof onInputChange === \"function\") {\r\n      onInputChange(text);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setValue(defaultValue);\r\n  }, [defaultValue]);\r\n\r\n  const handleOnFocus = () => {\r\n    if (typeof props.handleOnFocus === \"function\") {\r\n      props.handleOnFocus(true);\r\n    }\r\n  };\r\n\r\n  const handleOnBlur = () => {\r\n    if (typeof props.handleOnBlur === \"function\") {\r\n      props.handleOnBlur(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.container, containerProps]}>\r\n      <SearchBar\r\n        placeholder={placeholder}\r\n        lightTheme={false}\r\n        containerStyle={styles.containerTextInput}\r\n        inputContainerStyle={!darkTheme ? styles.textInput : styles.darkInput}\r\n        showCancel\r\n        showLoading={loading}\r\n        value={value}\r\n        platform={Platform.OS === \"ios\" ? \"ios\" : \"android\"}\r\n        onChangeText={handleInputChange}\r\n        onFocus={handleOnFocus}\r\n        onBlur={handleOnBlur}\r\n        onCancel={handleOnBlur}\r\n        cancelButtonProps={{ color: \"#222\" }}\r\n        {...props}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    position: \"relative\",\r\n    backgroundColor: \"transparent\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    margin: -5,\r\n  },\r\n  textInput: {\r\n    borderRadius: 8,\r\n    backgroundColor: \"transparent\",\r\n    borderWidth: 0,\r\n    fontSize: 8,\r\n  },\r\n  darkInput: {\r\n    borderRadius: 8,\r\n    backgroundColor: \"#eaeaea\",\r\n    borderWidth: 0,\r\n    fontSize: 8,\r\n  },\r\n  containerTextInput: {\r\n    padding: 0,\r\n    flex: 1,\r\n    backgroundColor: \"transparent\",\r\n    fontSize: 8,\r\n  },\r\n});\r\n\r\nexport { AppSearchBar };\r\n"]},"metadata":{},"sourceType":"module"}